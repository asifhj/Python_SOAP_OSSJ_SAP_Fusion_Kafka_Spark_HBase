<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"><SOAP-ENV:Header xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"/><soap:Body><ns2:createTroubleTicketByValueResponse xmlns="http://ossj.org/xml/Common/v1-5" xmlns:ns10="http://ossj.org/xml/Common-SharedAlarm/v1-5" xmlns:ns11="http://docs.oasis-open.org/wsrf/bf-2" xmlns:ns12="http://www.w3.org/2005/08/addressing" xmlns:ns13="http://docs.oasis-open.org/wsn/b-2" xmlns:ns14="http://docs.oasis-open.org/wsn/t-1" xmlns:ns15="http://docs.oasis-open.org/wsrf/r-2" xmlns:ns2="http://ossj.org/xml/TroubleTicket/v1-2" xmlns:ns3="http://ossj.org/xml/Common-CBECore/v1-5" xmlns:ns4="http://ossj.org/xml/Common-CBEBi/v1-5" xmlns:ns5="http://ossj.org/xml/Common-CBELocation/v1-5" xmlns:ns6="http://ossj.org/xml/TroubleTicket-CBETrouble/v1-2" xmlns:ns7="http://ossj.org/xml/TroubleTicket_x790/v0-5" xmlns:ns8="http://ossj.org/xml/Common-CBEDatatypes/v1-5" xmlns:ns9="http://ossj.org/xml/Common-CBEParty/v1-5"><ns2:troubleTicketKey><type>org.ossj.xml.troubleticket_x790.v0_5.X790TroubleTicketKey</type><primaryKey><primaryKey>2015-1009-0173</primaryKey></primaryKey></ns2:troubleTicketKey></ns2:createTroubleTicketByValueResponse></soap:Body></soap:Envelope>


./kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test

./kafka-topics.sh --describe --zookeeper localhost:2181 --topic test

./kafka-topics.sh --list --zookeeper localhost:2181

./kafka-console-consumer.sh --zookeeper localhost:2181 --topic test --from-beginning

./kafka-console-producer.sh --broker-list localhost:9092 --topic test


In srdetail
escalation
all technicalcategory


bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 3 --partitions 1 --topic my-replicated-topic

jdbc:phoenix:hdpstpprxy:2181:/hbase

Please find API details for point lookups,

1.	Get case by Case Id.
URL:
http://172.22.147.248:8092/api/case-manager/cases/{caseId}
       Method: GET

2.	Get case note description by case id and note id.
URL:
http://172.22.147.248:8092/api/case-manager/cases/{caseId}/caseNotes/{noteId}/description
       Method: GET

3.	Get case note log by case id and note id.
URL:
http://172.22.147.248:8092/api/case-manager/cases/{caseId}/caseNotes/{noteId}/log
       Method: GET

4.	Get Account by account Id.
URL:
http://172.22.147.248:8092/api/user-manager/accounts/{accountId}
       Method: GET

5.	Get Account by account name.
URL:
http://172.22.147.248:8092/api/user-manager/accounts
Method: POST

Pass the account name in the request body as follow and set the content type to “application/json”
{“accountName”:“Name of the account”}

6.	Get User by User Id
URL:
http://172.22.147.248:8092/api/user-manager/users/{userId}
Method: GET

7.	Get User by User name
URL:
http://172.22.147.248:8092/api/user-manager/users
Method: POST

Pass the account name in the request body as follow and set the content type to “application/json”
{“userName”:“Email Id / user name of the User”}


8. http://172.22.147.248:8092/api/user-manager/users


2015-1019-T-0019

db.getCollection('customerMaster').find({'relationship':{$elemMatch:   {'contactId': '0000037825', 'accountId': 100197496} }})


                if not document["header"][""] == response[""]:
                    tmp = [str(document["header"][""]).strip(), str(response[""]).strip(),
                           "Incorrect value for 'ccEngineer'!"]
                    table.append(tmp)
                    status = 1


                if not document["header"][""] == response[""]:
                    tmp = [str(document["header"][""]).strip(), str(response[""]).strip(),
                           "Incorrect value for 'ccEngineer'!"]
                    table.append(tmp)
                    status = 1


def worker_func_sr(utils, queue, output_writer, response_writer):
    while True:
        data = queue.get()
        document = data[0]
        document_no = data[1]
        startTime = data[2]
        output = ""
        try:
            output += utils.header(document, document_no, "SRID")
            response = utils.request(document, "SRID")
            output += "\n*******************************************"
            output += "\nVerifying srDetails..."
            output += "\n*******************************************"
            #output += utils.validate_sr_details(response, document, document_no, startTime, response_writer)
            client = MongoClient('10.219.48.134', 27017)
            db = client['ImportedEvents']
            collection_new = db['srKbLink-new']
            key = {'caseId': document['SRID']}
            document_kbLinks = collection_new.find_one({'caseId': document['SRID']})
            res = json.loads(response.text)
            output += "\n\n\n*******************************************"
            output += "\nVerifying kbLinks..."
            output += "\n*******************************************"
            if document_kbLinks is None:
                output += "\n No kblinks found in document"
                if not res['kbLinks']:
                    output += "\n No kbLinks found in response"
                else:
                    output += "\n kbLinks found in response"
            else:
                if not res['kbLinks']:
                    output += "\n No kbLinks found in response"
                else:
                    output += utils.validate_kb_links(response, document_kbLinks, document_no, startTime, response_writer)

            output += utils.footer(output)
            output_writer.write(output)
            output = ""

        except Exception:
            print Exception.message
            print "CaseId: "+str(document['SRID'])
            print(traceback.format_exc())
        print "\nProcessing completed document no: "+str(document_no)
        queue.task_done()